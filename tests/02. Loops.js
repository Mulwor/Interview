// –¶–∏–∫–ª—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: 

// ! switch(), case .., break,
let a = 2 + 2;

switch (a) {
  case 3:
    alert( '–ú–∞–ª–æ–≤–∞—Ç–æ' );
    break;
  case 4:
    alert( '–í —Ç–æ—á–∫—É!' );
    break;
  case 5:
    alert( '–ü–µ—Ä–µ–±–æ—Ä' );
    break;
  default:
    alert( "–ù–µ—Ç —Ç–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π" );
}

// * ====================================================================

// ! for...in; for...of 

// ! –ó–∞–º–µ—Ç–∫–∞ ‚Ññ1 - for ... in => —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, –æ–Ω –≤—ã–≤–æ–¥–∏—Ç –∫–ª—é—á–∏, –Ω–æ –Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è 
// ! –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –≤—ã–∑–≤–∞—Ç—å –∫–ª—é—á–∏

const uniqueUser = {
  name: "Valera",
  age: 24,
  isAdmin: true
}

for (const key in iterable) {
  console.log(key);                       // name, age, isAdmin
  console.log(uniqueUser[key]);           // Valera, 24, true
}


// ! –ó–∞–º–µ—Ç–∫–∞ ‚Ññ2 - for ... of => —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª—å—à–µ —Å –º–∞—Å—Å–∏–≤–æ–º, –æ–Ω –≤—ã–≤–æ–¥–∏—Ç —É–∂–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏
let iterable = [10, 20, 30];

for (const item in iterable) {
  console.log(item)
}


// ! –ó–∞–º–µ—Ç–∫–∞ ‚Ññ3 - –ï—Å–ª–∏ –º—ã —Å—Ä–∞–≤–Ω–∏–º –º–∞—Å—Å–∏–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ö, —Ç–æ –≤—ã—è—Å–Ω–∏—Ç—å—Å—è—å, —á—Ç–æ {0: "‚òï", 1: "üíª", 2: "üç∑", 3: "üç´"}
// ! for...in –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã, –∞ for...of —É–∂–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏.

const myLifeSummedUp = ["‚òï", "üíª", "üç∑", "üç´"]                                 
for (let item in myLifeSummedUp) {
  console.log(item)
}

for (let item of myLifeSummedUp) {
  // ["‚òï", "üíª", "üç∑", "üç´"]
  console.log(item)
}


// * ====================================================================

// ! –¶–∏–∫–ª while...do while
let i = 3;
while (i) {       // –∫–æ–≥–¥–∞ i –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 0, —É—Å–ª–æ–≤–∏–µ —Å—Ç–∞–Ω–µ—Ç –ª–æ–∂–Ω—ã–º, –∏ —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
  alert( i );
  i--;
}

let i1 = 0;
do {
  alert( i1 );
  i++;
} while (i1 < 3);


// * ====================================================================


// –£—Ä–æ–≤–µ–Ω—å —Å—Ä–µ–¥–Ω–∏–π
function divisors(integer) {
    let emptyArray = []
    
    for (let i = 2; i < integer; i++){
      if(integer % i == 0) {
        emptyArray.push(i)
      }
    }
    
    return res = emptyArray.length !== 0 ? emptyArray : `${integer} is prime`
};
  


divisors(12);             // should return [2,3,4,6]
divisors(25);             // should return [5]
divisors(13);             // should return "13 is prime"


// –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π
function SeriesSum(n) {
  let sum = 0;
  for (let i = 0; i < n; i++) {
    sum += 1 / (3 * i + 1);
  }
  return sum.toFixed(2);
}

SeriesSum(1)              // "1.00"
SeriesSum(2)              // "1.25"
SeriesSum(3)              // "1.39"
SeriesSum(4)              // "1.49"